
EEPROM_exc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000002e8  0000035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000398  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ee5  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a19  00000000  00000000  000013ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006ca  00000000  00000000  00001dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f8  00000000  00000000  00002490  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000050b  00000000  00000000  00002688  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000634  00000000  00000000  00002b93  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  000031c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 3a 01 	jmp	0x274	; 0x274 <__vector_20>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  6c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  70:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  74:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  78:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e8 ee       	ldi	r30, 0xE8	; 232
  90:	f2 e0       	ldi	r31, 0x02	; 2
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	ac 30       	cpi	r26, 0x0C	; 12
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>
  9e:	0e 94 2c 01 	call	0x258	; 0x258 <main>
  a2:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  aa:	88 b1       	in	r24, 0x08	; 8
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	88 b9       	out	0x08, r24	; 8
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <toggle_e+0x8>
  b2:	88 b1       	in	r24, 0x08	; 8
  b4:	8f 7b       	andi	r24, 0xBF	; 191
  b6:	88 b9       	out	0x08, r24	; 8
  b8:	08 95       	ret

000000ba <lcd_write>:
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	d8 2f       	mov	r29, r24
  c0:	66 23       	and	r22, r22
  c2:	21 f0       	breq	.+8      	; 0xcc <lcd_write+0x12>
  c4:	88 b1       	in	r24, 0x08	; 8
  c6:	80 61       	ori	r24, 0x10	; 16
  c8:	88 b9       	out	0x08, r24	; 8
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <lcd_write+0x18>
  cc:	88 b1       	in	r24, 0x08	; 8
  ce:	8f 7e       	andi	r24, 0xEF	; 239
  d0:	88 b9       	out	0x08, r24	; 8
  d2:	88 b1       	in	r24, 0x08	; 8
  d4:	8f 7d       	andi	r24, 0xDF	; 223
  d6:	88 b9       	out	0x08, r24	; 8
  d8:	87 b1       	in	r24, 0x07	; 7
  da:	8f 60       	ori	r24, 0x0F	; 15
  dc:	87 b9       	out	0x07, r24	; 7
  de:	c8 b1       	in	r28, 0x08	; 8
  e0:	c0 7f       	andi	r28, 0xF0	; 240
  e2:	8d 2f       	mov	r24, r29
  e4:	82 95       	swap	r24
  e6:	8f 70       	andi	r24, 0x0F	; 15
  e8:	8c 2b       	or	r24, r28
  ea:	88 b9       	out	0x08, r24	; 8
  ec:	0e 94 55 00 	call	0xaa	; 0xaa <toggle_e>
  f0:	df 70       	andi	r29, 0x0F	; 15
  f2:	dc 2b       	or	r29, r28
  f4:	d8 b9       	out	0x08, r29	; 8
  f6:	0e 94 55 00 	call	0xaa	; 0xaa <toggle_e>
  fa:	cf 60       	ori	r28, 0x0F	; 15
  fc:	c8 b9       	out	0x08, r28	; 8
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <lcd_read>:
 104:	88 23       	and	r24, r24
 106:	21 f0       	breq	.+8      	; 0x110 <lcd_read+0xc>
 108:	88 b1       	in	r24, 0x08	; 8
 10a:	80 61       	ori	r24, 0x10	; 16
 10c:	88 b9       	out	0x08, r24	; 8
 10e:	03 c0       	rjmp	.+6      	; 0x116 <lcd_read+0x12>
 110:	88 b1       	in	r24, 0x08	; 8
 112:	8f 7e       	andi	r24, 0xEF	; 239
 114:	88 b9       	out	0x08, r24	; 8
 116:	88 b1       	in	r24, 0x08	; 8
 118:	80 62       	ori	r24, 0x20	; 32
 11a:	88 b9       	out	0x08, r24	; 8
 11c:	87 b1       	in	r24, 0x07	; 7
 11e:	80 7f       	andi	r24, 0xF0	; 240
 120:	87 b9       	out	0x07, r24	; 7
 122:	88 b1       	in	r24, 0x08	; 8
 124:	80 64       	ori	r24, 0x40	; 64
 126:	88 b9       	out	0x08, r24	; 8
 128:	00 c0       	rjmp	.+0      	; 0x12a <lcd_read+0x26>
 12a:	96 b1       	in	r25, 0x06	; 6
 12c:	92 95       	swap	r25
 12e:	90 7f       	andi	r25, 0xF0	; 240
 130:	88 b1       	in	r24, 0x08	; 8
 132:	8f 7b       	andi	r24, 0xBF	; 191
 134:	88 b9       	out	0x08, r24	; 8
 136:	00 c0       	rjmp	.+0      	; 0x138 <lcd_read+0x34>
 138:	88 b1       	in	r24, 0x08	; 8
 13a:	80 64       	ori	r24, 0x40	; 64
 13c:	88 b9       	out	0x08, r24	; 8
 13e:	00 c0       	rjmp	.+0      	; 0x140 <lcd_read+0x3c>
 140:	86 b1       	in	r24, 0x06	; 6
 142:	8f 70       	andi	r24, 0x0F	; 15
 144:	28 b1       	in	r18, 0x08	; 8
 146:	2f 7b       	andi	r18, 0xBF	; 191
 148:	28 b9       	out	0x08, r18	; 8
 14a:	89 2b       	or	r24, r25
 14c:	08 95       	ret

0000014e <lcd_waitbusy>:
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	0e 94 82 00 	call	0x104	; 0x104 <lcd_read>
 154:	88 23       	and	r24, r24
 156:	dc f3       	brlt	.-10     	; 0x14e <lcd_waitbusy>
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <lcd_waitbusy+0xe>
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	0e 94 82 00 	call	0x104	; 0x104 <lcd_read>
 166:	08 95       	ret

00000168 <lcd_command>:
 168:	cf 93       	push	r28
 16a:	c8 2f       	mov	r28, r24
 16c:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_waitbusy>
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	8c 2f       	mov	r24, r28
 174:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <lcd_gotoxy>:
 17c:	61 11       	cpse	r22, r1
 17e:	04 c0       	rjmp	.+8      	; 0x188 <lcd_gotoxy+0xc>
 180:	80 58       	subi	r24, 0x80	; 128
 182:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_command>
 186:	08 95       	ret
 188:	80 54       	subi	r24, 0x40	; 64
 18a:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_command>
 18e:	08 95       	ret

00000190 <lcd_clrscr>:
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_command>
 196:	08 95       	ret

00000198 <lcd_putc>:
 198:	cf 93       	push	r28
 19a:	c8 2f       	mov	r28, r24
 19c:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_waitbusy>
 1a0:	ca 30       	cpi	r28, 0x0A	; 10
 1a2:	49 f4       	brne	.+18     	; 0x1b6 <lcd_putc+0x1e>
 1a4:	80 34       	cpi	r24, 0x40	; 64
 1a6:	10 f4       	brcc	.+4      	; 0x1ac <lcd_putc+0x14>
 1a8:	80 e4       	ldi	r24, 0x40	; 64
 1aa:	01 c0       	rjmp	.+2      	; 0x1ae <lcd_putc+0x16>
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	80 58       	subi	r24, 0x80	; 128
 1b0:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_command>
 1b4:	04 c0       	rjmp	.+8      	; 0x1be <lcd_putc+0x26>
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	8c 2f       	mov	r24, r28
 1ba:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <lcd_puts>:
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	fc 01       	movw	r30, r24
 1c8:	03 c0       	rjmp	.+6      	; 0x1d0 <lcd_puts+0xe>
 1ca:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_putc>
 1ce:	fe 01       	movw	r30, r28
 1d0:	ef 01       	movw	r28, r30
 1d2:	21 96       	adiw	r28, 0x01	; 1
 1d4:	80 81       	ld	r24, Z
 1d6:	81 11       	cpse	r24, r1
 1d8:	f8 cf       	rjmp	.-16     	; 0x1ca <lcd_puts+0x8>
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1e0:	1f 93       	push	r17
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	18 2f       	mov	r17, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 1e8:	87 b1       	in	r24, 0x07	; 7
 1ea:	8f 67       	ori	r24, 0x7F	; 127
 1ec:	87 b9       	out	0x07, r24	; 7
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1ee:	80 e9       	ldi	r24, 0x90	; 144
 1f0:	99 e3       	ldi	r25, 0x39	; 57
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lcd_init+0x12>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 1f6:	88 b1       	in	r24, 0x08	; 8
 1f8:	82 60       	ori	r24, 0x02	; 2
 1fa:	88 b9       	out	0x08, r24	; 8
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 1fc:	88 b1       	in	r24, 0x08	; 8
 1fe:	81 60       	ori	r24, 0x01	; 1
 200:	88 b9       	out	0x08, r24	; 8
    lcd_e_toggle();
 202:	0e 94 55 00 	call	0xaa	; 0xaa <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 206:	85 ef       	ldi	r24, 0xF5	; 245
 208:	91 e1       	ldi	r25, 0x11	; 17
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <lcd_init+0x2a>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 20e:	0e 94 55 00 	call	0xaa	; 0xaa <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 212:	ca e3       	ldi	r28, 0x3A	; 58
 214:	d0 e0       	ldi	r29, 0x00	; 0
 216:	ce 01       	movw	r24, r28
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <lcd_init+0x38>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 21c:	0e 94 55 00 	call	0xaa	; 0xaa <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 220:	ce 01       	movw	r24, r28
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <lcd_init+0x42>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 226:	88 b1       	in	r24, 0x08	; 8
 228:	8e 7f       	andi	r24, 0xFE	; 254
 22a:	88 b9       	out	0x08, r24	; 8
    lcd_e_toggle();
 22c:	0e 94 55 00 	call	0xaa	; 0xaa <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 230:	21 97       	sbiw	r28, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <lcd_init+0x50>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 234:	88 e2       	ldi	r24, 0x28	; 40
 236:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 23a:	88 e0       	ldi	r24, 0x08	; 8
 23c:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 240:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 244:	86 e0       	ldi	r24, 0x06	; 6
 246:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 24a:	81 2f       	mov	r24, r17
 24c:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_command>

}/* lcd_init */
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	08 95       	ret

00000258 <main>:
#include "Libraries/lcd.h"
#include "Libraries/ser_lib.h"

int main(void)
{
    lcd_init(LCD_DISP_ON);
 258:	8c e0       	ldi	r24, 0x0C	; 12
 25a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_init>
	init_usart();
 25e:	0e 94 44 01 	call	0x288	; 0x288 <init_usart>

	lcd_puts("VTI Waregem");
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_puts>
	lcd_gotoxy(0,1);	//	 set cursor to second line
 26a:	61 e0       	ldi	r22, 0x01	; 1
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_gotoxy>
 272:	ff cf       	rjmp	.-2      	; 0x272 <main+0x1a>

00000274 <__vector_20>:
    {
		
    }
}

ISR(USART0_RX_vect){
 274:	1f 92       	push	r1
 276:	0f 92       	push	r0
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	0f 92       	push	r0
 27c:	11 24       	eor	r1, r1
	
}
 27e:	0f 90       	pop	r0
 280:	0f be       	out	0x3f, r0	; 63
 282:	0f 90       	pop	r0
 284:	1f 90       	pop	r1
 286:	18 95       	reti

00000288 <init_usart>:

//	#MOD
void init_usart()
{
	//	set RX(PD0) as input, TX(PD1) as output and high
	DDRD &= ~(1 << DDRD0);
 288:	8a b1       	in	r24, 0x0a	; 10
 28a:	8e 7f       	andi	r24, 0xFE	; 254
 28c:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << DDRD1);
 28e:	8a b1       	in	r24, 0x0a	; 10
 290:	82 60       	ori	r24, 0x02	; 2
 292:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PORTD1);
 294:	8b b1       	in	r24, 0x0b	; 11
 296:	82 60       	ori	r24, 0x02	; 2
 298:	8b b9       	out	0x0b, r24	; 11
	//	normal speed
	UCSR0A &= ~(1 << U2X0);
 29a:	e0 ec       	ldi	r30, 0xC0	; 192
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	8d 7f       	andi	r24, 0xFD	; 253
 2a2:	80 83       	st	Z, r24
	//	set baud rate to 9600 (23 for the register)
	UBRR0 = 23;
 2a4:	87 e1       	ldi	r24, 0x17	; 23
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 2ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	//	mode select: asynchronous USART
	UCSR0C &= ~((1 << UMSEL00) | (1 << UMSEL01));
 2b0:	e2 ec       	ldi	r30, 0xC2	; 194
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	80 81       	ld	r24, Z
 2b6:	8f 73       	andi	r24, 0x3F	; 63
 2b8:	80 83       	st	Z, r24
	//	No parity
	UCSR0C &= ~((1 << UPM00) | (1 << UPM01));
 2ba:	80 81       	ld	r24, Z
 2bc:	8f 7c       	andi	r24, 0xCF	; 207
 2be:	80 83       	st	Z, r24
	//	1 stop bit
	UCSR0C &= ~(1 << USBS0);
 2c0:	80 81       	ld	r24, Z
 2c2:	87 7f       	andi	r24, 0xF7	; 247
 2c4:	80 83       	st	Z, r24
	//	8 databits
	UCSR0B &= ~(1 << UCSZ02);
 2c6:	a1 ec       	ldi	r26, 0xC1	; 193
 2c8:	b0 e0       	ldi	r27, 0x00	; 0
 2ca:	8c 91       	ld	r24, X
 2cc:	8b 7f       	andi	r24, 0xFB	; 251
 2ce:	8c 93       	st	X, r24
	UCSR0C |=((1 << UCSZ00) | (1 << UCSZ01));
 2d0:	80 81       	ld	r24, Z
 2d2:	86 60       	ori	r24, 0x06	; 6
 2d4:	80 83       	st	Z, r24
	//	we want to trigger an interrupt when the receive buffer is full
	UCSR0B |= (1 << RXCIE0);
 2d6:	8c 91       	ld	r24, X
 2d8:	80 68       	ori	r24, 0x80	; 128
 2da:	8c 93       	st	X, r24
	//	enable receive and transmit port
	UCSR0B |= ((1 << RXEN0) | (1 << TXEN0));
 2dc:	8c 91       	ld	r24, X
 2de:	88 61       	ori	r24, 0x18	; 24
 2e0:	8c 93       	st	X, r24
 2e2:	08 95       	ret

000002e4 <_exit>:
 2e4:	f8 94       	cli

000002e6 <__stop_program>:
 2e6:	ff cf       	rjmp	.-2      	; 0x2e6 <__stop_program>
