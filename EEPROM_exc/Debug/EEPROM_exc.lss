
EEPROM_exc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000208  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e7a  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009f6  00000000  00000000  0000122e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000672  00000000  00000000  00001c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001dc  00000000  00000000  00002298  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ff  00000000  00000000  00002474  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000605  00000000  00000000  00002973  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00002f78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <main>
  8c:	0c 94 02 01 	jmp	0x204	; 0x204 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  94:	88 b1       	in	r24, 0x08	; 8
  96:	80 64       	ori	r24, 0x40	; 64
  98:	88 b9       	out	0x08, r24	; 8
  9a:	00 c0       	rjmp	.+0      	; 0x9c <toggle_e+0x8>
  9c:	88 b1       	in	r24, 0x08	; 8
  9e:	8f 7b       	andi	r24, 0xBF	; 191
  a0:	88 b9       	out	0x08, r24	; 8
  a2:	08 95       	ret

000000a4 <lcd_write>:
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	d8 2f       	mov	r29, r24
  aa:	66 23       	and	r22, r22
  ac:	21 f0       	breq	.+8      	; 0xb6 <lcd_write+0x12>
  ae:	88 b1       	in	r24, 0x08	; 8
  b0:	80 61       	ori	r24, 0x10	; 16
  b2:	88 b9       	out	0x08, r24	; 8
  b4:	03 c0       	rjmp	.+6      	; 0xbc <lcd_write+0x18>
  b6:	88 b1       	in	r24, 0x08	; 8
  b8:	8f 7e       	andi	r24, 0xEF	; 239
  ba:	88 b9       	out	0x08, r24	; 8
  bc:	88 b1       	in	r24, 0x08	; 8
  be:	8f 7d       	andi	r24, 0xDF	; 223
  c0:	88 b9       	out	0x08, r24	; 8
  c2:	87 b1       	in	r24, 0x07	; 7
  c4:	8f 60       	ori	r24, 0x0F	; 15
  c6:	87 b9       	out	0x07, r24	; 7
  c8:	c8 b1       	in	r28, 0x08	; 8
  ca:	c0 7f       	andi	r28, 0xF0	; 240
  cc:	8d 2f       	mov	r24, r29
  ce:	82 95       	swap	r24
  d0:	8f 70       	andi	r24, 0x0F	; 15
  d2:	8c 2b       	or	r24, r28
  d4:	88 b9       	out	0x08, r24	; 8
  d6:	0e 94 4a 00 	call	0x94	; 0x94 <toggle_e>
  da:	df 70       	andi	r29, 0x0F	; 15
  dc:	dc 2b       	or	r29, r28
  de:	d8 b9       	out	0x08, r29	; 8
  e0:	0e 94 4a 00 	call	0x94	; 0x94 <toggle_e>
  e4:	cf 60       	ori	r28, 0x0F	; 15
  e6:	c8 b9       	out	0x08, r28	; 8
  e8:	df 91       	pop	r29
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <lcd_read>:
  ee:	88 23       	and	r24, r24
  f0:	21 f0       	breq	.+8      	; 0xfa <lcd_read+0xc>
  f2:	88 b1       	in	r24, 0x08	; 8
  f4:	80 61       	ori	r24, 0x10	; 16
  f6:	88 b9       	out	0x08, r24	; 8
  f8:	03 c0       	rjmp	.+6      	; 0x100 <lcd_read+0x12>
  fa:	88 b1       	in	r24, 0x08	; 8
  fc:	8f 7e       	andi	r24, 0xEF	; 239
  fe:	88 b9       	out	0x08, r24	; 8
 100:	88 b1       	in	r24, 0x08	; 8
 102:	80 62       	ori	r24, 0x20	; 32
 104:	88 b9       	out	0x08, r24	; 8
 106:	87 b1       	in	r24, 0x07	; 7
 108:	80 7f       	andi	r24, 0xF0	; 240
 10a:	87 b9       	out	0x07, r24	; 7
 10c:	88 b1       	in	r24, 0x08	; 8
 10e:	80 64       	ori	r24, 0x40	; 64
 110:	88 b9       	out	0x08, r24	; 8
 112:	00 c0       	rjmp	.+0      	; 0x114 <lcd_read+0x26>
 114:	96 b1       	in	r25, 0x06	; 6
 116:	92 95       	swap	r25
 118:	90 7f       	andi	r25, 0xF0	; 240
 11a:	88 b1       	in	r24, 0x08	; 8
 11c:	8f 7b       	andi	r24, 0xBF	; 191
 11e:	88 b9       	out	0x08, r24	; 8
 120:	00 c0       	rjmp	.+0      	; 0x122 <lcd_read+0x34>
 122:	88 b1       	in	r24, 0x08	; 8
 124:	80 64       	ori	r24, 0x40	; 64
 126:	88 b9       	out	0x08, r24	; 8
 128:	00 c0       	rjmp	.+0      	; 0x12a <lcd_read+0x3c>
 12a:	86 b1       	in	r24, 0x06	; 6
 12c:	8f 70       	andi	r24, 0x0F	; 15
 12e:	28 b1       	in	r18, 0x08	; 8
 130:	2f 7b       	andi	r18, 0xBF	; 191
 132:	28 b9       	out	0x08, r18	; 8
 134:	89 2b       	or	r24, r25
 136:	08 95       	ret

00000138 <lcd_waitbusy>:
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	0e 94 77 00 	call	0xee	; 0xee <lcd_read>
 13e:	88 23       	and	r24, r24
 140:	dc f3       	brlt	.-10     	; 0x138 <lcd_waitbusy>
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <lcd_waitbusy+0xe>
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	0e 94 77 00 	call	0xee	; 0xee <lcd_read>
 150:	08 95       	ret

00000152 <lcd_command>:
 152:	cf 93       	push	r28
 154:	c8 2f       	mov	r28, r24
 156:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_waitbusy>
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	8c 2f       	mov	r24, r28
 15e:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_write>
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <lcd_clrscr>:
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_command>
 16c:	08 95       	ret

0000016e <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 16e:	1f 93       	push	r17
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	18 2f       	mov	r17, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 176:	87 b1       	in	r24, 0x07	; 7
 178:	8f 67       	ori	r24, 0x7F	; 127
 17a:	87 b9       	out	0x07, r24	; 7
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 17c:	80 e9       	ldi	r24, 0x90	; 144
 17e:	99 e3       	ldi	r25, 0x39	; 57
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <lcd_init+0x12>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 184:	88 b1       	in	r24, 0x08	; 8
 186:	82 60       	ori	r24, 0x02	; 2
 188:	88 b9       	out	0x08, r24	; 8
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 18a:	88 b1       	in	r24, 0x08	; 8
 18c:	81 60       	ori	r24, 0x01	; 1
 18e:	88 b9       	out	0x08, r24	; 8
    lcd_e_toggle();
 190:	0e 94 4a 00 	call	0x94	; 0x94 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 194:	85 ef       	ldi	r24, 0xF5	; 245
 196:	91 e1       	ldi	r25, 0x11	; 17
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <lcd_init+0x2a>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 19c:	0e 94 4a 00 	call	0x94	; 0x94 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1a0:	ca e3       	ldi	r28, 0x3A	; 58
 1a2:	d0 e0       	ldi	r29, 0x00	; 0
 1a4:	ce 01       	movw	r24, r28
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <lcd_init+0x38>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 1aa:	0e 94 4a 00 	call	0x94	; 0x94 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1ae:	ce 01       	movw	r24, r28
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcd_init+0x42>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 1b4:	88 b1       	in	r24, 0x08	; 8
 1b6:	8e 7f       	andi	r24, 0xFE	; 254
 1b8:	88 b9       	out	0x08, r24	; 8
    lcd_e_toggle();
 1ba:	0e 94 4a 00 	call	0x94	; 0x94 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1be:	21 97       	sbiw	r28, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <lcd_init+0x50>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 1c2:	88 e2       	ldi	r24, 0x28	; 40
 1c4:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 1c8:	88 e0       	ldi	r24, 0x08	; 8
 1ca:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 1ce:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 1d2:	86 e0       	ldi	r24, 0x06	; 6
 1d4:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 1d8:	81 2f       	mov	r24, r17
 1da:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_command>

}/* lcd_init */
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	1f 91       	pop	r17
 1e4:	08 95       	ret

000001e6 <main>:
#include "Libraries/lcd.h"
#include "Libraries/ser_lib.h"

int main(void)
{
    lcd_init(LCD_DISP_ON);
 1e6:	8c e0       	ldi	r24, 0x0C	; 12
 1e8:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_init>
	init_usart();
 1ec:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <init_usart>
 1f0:	ff cf       	rjmp	.-2      	; 0x1f0 <main+0xa>

000001f2 <init_usart>:
//UCSR0A = USART0 Control and Status Register A
//UCSR0B = USART0 Control and Status Register B
//UCSR0C = USART0 Control and Status Register C
//UBRR0L and UBRR0H = USART0 Baud Rate Registers

UBRR0H = 0; 
 1f2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
UBRR0L = 23; //9600 bps, UBRR=23 en U2X=0 (normal snelheid)
 1f6:	87 e1       	ldi	r24, 0x17	; 23
 1f8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
UCSR0B = (1<<RXEN0) | (1<<TXEN0); // activeren van ontvanger en zender
 1fc:	88 e1       	ldi	r24, 0x18	; 24
 1fe:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 202:	08 95       	ret

00000204 <_exit>:
 204:	f8 94       	cli

00000206 <__stop_program>:
 206:	ff cf       	rjmp	.-2      	; 0x206 <__stop_program>
